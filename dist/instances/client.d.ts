import type { IClient, TClientConfigs, TClientOptions } from "../interfaces/client.interface";
export declare class Client implements IClient {
    #private;
    private readonly configs;
    private readonly options?;
    private token;
    /**
     * Initialize BoolGuard client instance
     * @param configs
     * @param options
     */
    constructor(configs: TClientConfigs, options?: TClientOptions | undefined);
    /**
     * Sign JWT token with Ed25519 algorithm
     * @returns
     */
    signToken(): Promise<string>;
    /**
     * Ping to BoolGuard service to check if the service is reachable
     * This action should be done before any other actions.
     * @returns
     */
    ping(): Promise<boolean>;
    /**
     * Create a new plain account with custom account name
     * @param args
     * @returns
     */
    createPlainAccount({ identity, password, metadata }: Parameters<IClient["createPlainAccount"]>[number]): ReturnType<IClient["createPlainAccount"]>;
    /**
     * Create a new email account, this action will create email record and link to account
     * with random account alias generated by system.
     * @param args
     */
    createEmailAccount({ identity, password, metadata }: Parameters<IClient["createEmailAccount"]>[number]): ReturnType<IClient["createEmailAccount"]>;
    /**
     * Authenticate an account with account name and password
     * This action will return account info and JWT token if successful
     * @param param0
     */
    authenticate({ identity, password }: Parameters<IClient["authenticate"]>[number]): ReturnType<IClient["authenticate"]>;
    /**
     * Authenticate a token and return account info if token is valid
     * @param param0
     */
    verifyToken({ token }: Parameters<IClient["verifyToken"]>[number]): ReturnType<IClient["verifyToken"]>;
}
